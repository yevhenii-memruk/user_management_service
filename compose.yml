services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    container_name: user_management_apps
    volumes:
      - .:/app
      - ./logs:/app/logs
    networks:
      - backend
    depends_on:
      - db
      - redis
      - rabbitmq
    command: ["/app/scripts/entrypoint.sh"]

  db:
    image: postgres
    container_name: user_management_db
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_NAME" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: user_management_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    command: ["redis-server", "--bind", "0.0.0.0"]

  rabbitmq:
    image: rabbitmq:3-management
    container_name: user_management_rabbitmq
    restart: always
    ports:
      - "5671:5672"  # AMQP protocol
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 10s
      retries: 5

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
